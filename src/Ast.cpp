#include "Ast.h"
#include "SymbolTable.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"
#include <string>
#include "Type.h"

extern FILE *yyout;
int Node::counter = 0;
IRBuilder* Node::builder = nullptr;

Node::Node()
{
    seq = counter++;
}

void Node::backPatch(std::vector<BasicBlock**> &list, BasicBlock*target)
{
    for(auto &bb:list)
        *bb = target;
}

std::vector<BasicBlock**> Node::merge(std::vector<BasicBlock**> &list1, std::vector<BasicBlock**> &list2)
{
    std::vector<BasicBlock**> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    root->genCode();
}


void BinaryExpr::genCode()
{
    BasicBlock *bb = builder->getInsertBB();// 获取当前插入点的基本块
    Function *func = bb->getParent();// 获取基本块所属的函数
    int cmpOp = 0;// 运算符操作码
    if (op == AND)
    {
        BasicBlock *trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB.
        expr1->genCode();
        backPatch(expr1->trueList(), trueBB);
        builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = expr2->trueList();
        false_list = merge(expr1->falseList(), expr2->falseList());
    }
    else if(op == OR)
    {
        // 实现逻辑或or的代码生成逻辑：左操作数为true时直接为true，无需计算右操作数
        BasicBlock *falseBB = new BasicBlock(func);  // 左操作数为false时，跳转到falseBB，计算右操作数
        expr1->genCode();
        backPatch(expr1->falseList(), falseBB);// 用falseBB替换expr1的falseList中的空指针（回填）
        builder->setInsertBB(falseBB);
        expr2->genCode();
        true_list = merge(expr1->trueList(), expr2->trueList());
        false_list = expr2->falseList();
    }
    else if(op >= LESS && op <= NEQ)
    {
        // 第1步：生成两个操作数的代码
        expr1->genCode();
        expr2->genCode();
        // 获取操作数的值
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        
        // 第2步：创建临时变量存储比较结果
        Operand *tmp = new Operand(new TemporarySymbolEntry(
            TypeSystem::boolType,    // 结果类型为bool
            SymbolTable::getLabel()  // 获取新的标签
        ));
        
        // 第3步：根据操作符类型选择对应的比较指令
        // int cmpOp;// 操作码
        switch (op) {
            case LESS:
                cmpOp = CmpInstruction::L;    // 小于
                break;
            case GREATER:
                cmpOp = CmpInstruction::G;    // 大于
                break;
            case LEQ:
                cmpOp = CmpInstruction::LE;   // 小于等于
                break;
            case GEQ:
                cmpOp = CmpInstruction::GE;   // 大于等于
                break;
            case EQ:
                cmpOp = CmpInstruction::E;    // 等于
                break;
            case NEQ:
                cmpOp = CmpInstruction::NE;   // 不等于
                break;
        }
        
        // 第4步：生成比较指令
        new CmpInstruction(cmpOp, tmp, src1, src2, bb);

        // 第5步：创建true和false分支的基本块
        BasicBlock *trueBB = new BasicBlock(func);   // 条件为真时跳转的基本块
        BasicBlock *falseBB = new BasicBlock(func);  // 条件为假时跳转的基本块
        
        // 第6步：生成条件跳转指令
        new CondBrInstruction(trueBB, falseBB, tmp, bb);
        
        // 第7步：设置true和false列表，用于后续的回填
        true_list.push_back(&trueBB);    // 记录true分支的目标
        false_list.push_back(&falseBB);  // 记录false分支的目标
    }
    else if(op >= ADD && op <= SUB)
    {
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        default:
            opcode = -1;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
}

void Constant::genCode()
{
    // we don't need to generate code.
}

void Id::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getAddr();
    new LoadInstruction(dst, addr, bb);
}

void IfStmt::genCode()
{
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    cond->genCode();
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    builder->setInsertBB(end_bb);
}

// if-else语句
void IfElseStmt::genCode()
{
    // 1. 获取当前函数并创建基本块
    Function* func = builder->getInsertBB()->getParent();
    BasicBlock* then_bb = new BasicBlock(func);// then分支
    BasicBlock* else_bb = new BasicBlock(func);// else分支
    BasicBlock* end_bb = new BasicBlock(func);// 结束块

    // 2. 生成条件判断代码
    cond->genCode();
    backPatch(cond->trueList(), then_bb);// 条件为真跳转到then_bb
    backPatch(cond->falseList(), else_bb);// 条件为假跳转到else_bb

    // 3. 生成then分支代码
    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);// then分支结束跳转到end_bb

    // 4. 生成else分支代码
    builder->setInsertBB(else_bb);
    elseStmt->genCode();
    else_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, else_bb);// else分支结束跳转到end_bb

    // 5. 设置插入点到结束块
    builder->setInsertBB(end_bb);
}

// 复合语句
void CompoundStmt::genCode()
{
    // 遍历复合语句中的所有语句
    if(stmt)
        stmt->genCode();
}

void SeqNode::genCode()
{
    // 实现序列节点的代码生成逻辑
    // 按顺序生成每个节点的代码
    stmt1->genCode();
    stmt2->genCode();
}

void DeclStmt::genCode()
{
    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
    if(se->isGlobal())
    {
        Operand *addr;
        SymbolEntry *addr_se;
        addr_se = new IdentifierSymbolEntry(*se);
        addr_se->setType(new PointerType(se->getType()));
        addr = new Operand(addr_se);
        se->setAddr(addr);
    }
    else if(se->isLocal())
    {
        Function *func = builder->getInsertBB()->getParent();
        BasicBlock *entry = func->getEntry();
        Instruction *alloca;
        Operand *addr;
        SymbolEntry *addr_se;
        Type *type;
        type = new PointerType(se->getType());
        addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
        addr = new Operand(addr_se);
        alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
        entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
        se->setAddr(addr);                                          // set the addr operand in symbol entry so that we can use it in subsequent code generation.
    }
}

// 返回语句
void ReturnStmt::genCode()
{
    // 1. 获取当前基本块
    BasicBlock* bb = builder->getInsertBB();
    
    // 2. 处理返回值
    if(retValue) {
        // 如果有返回值，先生成返回值的代码
        retValue->genCode();
        // 获取返回值的操作数
        Operand* ret = retValue->getOperand();
        // 创建返回指令，包含返回值
        new RetInstruction(ret, bb);
    } else {
        // 如果没有返回值，创建空返回指令（void返回）
        new RetInstruction(nullptr, bb);
    }
}

// 赋值语句
void AssignStmt::genCode()
{
    // 1. 获取当前基本块
    BasicBlock* bb = builder->getInsertBB();
    
    // 2. 生成右侧表达式的代码
    expr->genCode();
    Operand* src = expr->getOperand();
    
    // 3. 获取左侧变量的地址
    Operand* addr = lval->getOperand();
    
    // 4. 创建存储指令，将右侧值存入左侧变量
    new StoreInstruction(addr, src, bb);
}

// AST的类型检查 
void Ast::typeCheck()
{
    if(root)
        root->typeCheck();
}

// 二元表达式的类型检查
void BinaryExpr::typeCheck()
{
    // 1. 递归检查左右操作数
    expr1->typeCheck();
    expr2->typeCheck();
    
    // 2. 获取操作数类型
    Type* type1 = expr1->getSymPtr()->getType();
    Type* type2 = expr2->getSymPtr()->getType();
    
    // 3. 根据操作符类型进行检查
    if(op == ADD || op == SUB) {
        // 算术运算要求操作数为整型
        if(!type1->isInt() || !type2->isInt()) {
            fprintf(stderr, "Type error in arithmetic operation\n");
        }
        symbolEntry->setType(TypeSystem::intType);
    }
    else if(op == AND || op == OR) {
        // 逻辑运算要求操作数为布尔型（暂时用int代替）
        // if(!type1->isBool() || !type2->isBool()) {
        if(!type1->isInt() || !type2->isInt()) {
            fprintf(stderr, "Type error in logical operation\n");
        }
        symbolEntry->setType(TypeSystem::boolType);
    }
    else if(op == LESS || op == GREATER) {
        // 关系运算要求操作数类型相同
        if(type1->getKind() != type2->getKind()) {
            fprintf(stderr, "Type error in comparison operation\n");
        }
        symbolEntry->setType(TypeSystem::boolType);
    }
}

// 常量类型检查
void Constant::typeCheck()
{
    // 常量的类型在构造时已确定，只需验证类型有效性
    Type* type = symbolEntry->getType();
    // if(!type->isInt() && !type->isBool()) {
    if(!type->isInt()) {
        fprintf(stderr, "Invalid constant type\n");
    }  
}

// 标识符类型检查
void Id::typeCheck()
{
    // 1. 获取标识符类型
    Type* type = symbolEntry->getType();
    
    // 2. 验证类型存在且有效
    if(!type) {
        fprintf(stderr, "Identifier '%s' has no type\n", 
                symbolEntry->toStr().c_str());
        return;
    }

    // 3. 检查类型是否为有效类型（int或bool，其中bool用int代替）
    // if(!type->isInt() && !type->isBool()) {
    if(!type->isInt()) {
        fprintf(stderr, "Identifier '%s' has invalid type\n", 
                symbolEntry->toStr().c_str());
    }
}

// if语句的类型检查
void IfStmt::typeCheck()
{
    // 1. 检查条件表达式
    cond->typeCheck();
    Type* condType = cond->getSymPtr()->getType();
    // if(!condType->isBool()) {
    if(!condType->isInt()) {
        fprintf(stderr, "If statement condition must be boolean type\n");
    }
    
    // 2. 检查then语句
    thenStmt->typeCheck();
}

// if-else语句的类型检查
void IfElseStmt::typeCheck()
{
    // 1. 检查条件表达式
    cond->typeCheck();
    Type* condType = cond->getSymPtr()->getType();
    // if(!condType->isBool()) {
    if(!condType->isInt()) {
        fprintf(stderr, "If-Else statement condition must be boolean type\n");
    }
    
    // 2. 检查then和else语句
    thenStmt->typeCheck();
    elseStmt->typeCheck();
}

// 复合语句的类型检查
void CompoundStmt::typeCheck()
{
    // 检查复合语句中的所有语句
    if(stmt)
        stmt->typeCheck();
}

// 序列节点的类型检查
void SeqNode::typeCheck()
{
    // 1. 检查第一个语句
    if(stmt1)
        stmt1->typeCheck();
    
    // 2. 检查第二个语句
    if(stmt2)
        stmt2->typeCheck();
}

// 声明语句的类型检查
void DeclStmt::typeCheck()
{
    // 1. 获取声明的变量类型
    Type* declType = id->getSymPtr()->getType();
    
    // 2. 验证类型有效性
    // if(!declType->isInt() && !declType->isBool()) {
    if(!declType->isInt()) {
        fprintf(stderr, "Invalid declaration type for '%s'\n", 
                id->getSymPtr()->toStr().c_str());
        return;
    }
    
    // 3. 如果有初始化表达式，检查类型匹配（暂时不考虑初始化）
    // if(expr) {
    //     expr->typeCheck();
    //     Type* initType = expr->getSymPtr()->getType();
    //     if(declType->getKind() != initType->getKind()) {
    //         fprintf(stderr, "Type mismatch in initialization of '%s'\n",
    //                 id->getSymPtr()->toStr().c_str());
    //     }
    // }
}

// 返回语句的类型检查
void ReturnStmt::typeCheck()
{
    // 1. 获取当前函数的返回类型
    Type* funcRetType = builder->getInsertBB()->getParent()->getSymPtr()->getType();
    
    // 2. 检查返回值
    if(retValue) {
        // 有返回值的情况
        retValue->typeCheck();
        Type* retType = retValue->getSymPtr()->getType();
        
        // 检查返回值类型是否匹配函数返回类型
        if(funcRetType->getKind() != retType->getKind()) {
            fprintf(stderr, "Return type mismatch\n");
        }
    } else {
        // 无返回值的情况，检查函数是否为void
        if(!funcRetType->isVoid()) {
            fprintf(stderr, "Function requires return value\n");
        }
    }
}

// 赋值语句的类型检查
void AssignStmt::typeCheck()
{
    // 1. 检查左值表达式
    lval->typeCheck();
    Type* lvalType = lval->getSymPtr()->getType();
    
    // 2. 检查右侧表达式
    expr->typeCheck();
    Type* exprType = expr->getSymPtr()->getType();
    
    // 3. 验证类型匹配（两侧的表达式类型必须匹配）
    if(lvalType->getKind() != exprType->getKind()) {
        fprintf(stderr, "Type mismatch in assignment\n");
        return;
    }
    
    // 4. 确保左值是可赋值的
    // if(!lvalType->isInt() && !lvalType->isBool()) {
    if(!lvalType->isInt()) {
        fprintf(stderr, "Invalid type for assignment\n");
    }
}

void BinaryExpr::output(int level)
{
    std::string op_str;
    switch(op)
    {
        case ADD:
            op_str = "add";
            break;
        case SUB:
            op_str = "sub";
            break;
        case AND:
            op_str = "and";
            break;
        case OR:
            op_str = "or";
            break;
        case LESS:
            op_str = "less";
            break;
    }
    fprintf(yyout, "%*cBinaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr1->output(level + 4);
    expr2->output(level + 4);
}

void Ast::output()
{
    fprintf(yyout, "program\n");
    if(root != nullptr)
        root->output(4);
}

void Constant::output(int level)
{
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    fprintf(yyout, "%*cIntegerLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
}

void Id::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());
}

void CompoundStmt::output(int level)
{
    fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
    stmt->output(level + 4);
}

void SeqNode::output(int level)
{
    stmt1->output(level);
    stmt2->output(level);
}

void DeclStmt::output(int level)
{
    fprintf(yyout, "%*cDeclStmt\n", level, ' ');
    id->output(level + 4);
}

void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
    elseStmt->output(level + 4);
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    retValue->output(level + 4);
}

void AssignStmt::output(int level)
{
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);
    expr->output(level + 4);
}

void FunctionDef::output(int level)
{
    std::string name, type;
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ', 
            name.c_str(), type.c_str());
    stmt->output(level + 4);
}
